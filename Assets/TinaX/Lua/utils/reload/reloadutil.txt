---再生产！！！


XCore.Utils = XCore.Utils or {}
XCore.Utils.ReloadUtil = XCore.Utils.ReloadUtil or {}





-- ---热重载某个Code
-- function LuaReload.HotReloadCode(code_path,full_path)
--     -- dump(package.loaded)
--     local OldObject;
--     local origin_code_path_name;
--     for i , v in pairs(package.loaded) do
--         if string.lower(i) == string.lower(code_path) then
--             --就决定是你辣！
--             OldObject = v
--             origin_code_path_name = i;
--         end
--     end
    
--     --记录旧的元素
--     local old_code_info = {} 
--     --[[
--         key: path
--         value:value
--     ]]

--     local function HandleTable(_table,base_path)
--         local cur_path = base_path or "";
--         local function get_cur_e_path(_e) --获取当前元素的path
--             if cur_path == "" then
--                 return _e
--             else
--                 return cur_path .. "." .. _e
--             end
--         end
--         for i , v in pairs(_table) do
--             -- print(type(v))
--             local cur_e_path = get_cur_e_path(i)
--             if type(v) == "table" then
--                 --递归
--                 HandleTable(v,cur_e_path)
--             end
--             if type(v) ~= "function" and type(v) ~= "table" then
--                 --登记
--                 old_code_info[cur_e_path] = v
--             end
--         end
--     end
    
--     if OldObject == nil then 
--         print("没找到已加载的：" .. code_path)
--         return
--     end

--     HandleTable(OldObject)

--     -- dump(old_code_info,"旧模块中，要保留的内容")

--     --释放掉旧的代码
--     package.loaded[origin_code_path_name] = nil
--     local new_code = require(origin_code_path_name)
--     -- dump(new_code,"new_code")

--     if new_code == nil then
--         print("热重载失败：模块未加载成功，或没有返回模块")
--         return
--     end
    
--     --尝试替换
--     local function tryReplace(path,index,_table,v)
--         -- print("替换：\npath:" .. path .. "\nindex:" .. index .. "\n将替换为" .. tostring(v))
--         local path_arr = string.split(path,".")
--         local cur_handle_name = path_arr[index]
--             -- print("当前要处理的key:" .. cur_handle_name)
--         if index == #path_arr then
--             -- print("    当前是最终层级")
--             --这是最终层级
--             if _table[cur_handle_name] == nil then
--                 --新的table中没有这个key,覆盖
--                 -- print("   执行：替换为：" .. tostring(v))
--                 _table[cur_handle_name] = v
--                 return _table
--             else
--                 if(type(_table[cur_handle_name]) ~= "table" and type(_table[cur_handle_name]) ~= "function") then
--                     -- print("   执行：替换为：" .. tostring(v))
--                     _table[cur_handle_name] = v
--                     return _table
--                 end
--             end
--         else
--             --这里的table中的某一级
--             if _table[cur_handle_name] == nil then
--                 --新的table中没有这一级，创建table
--                 _table[cur_handle_name] = {}
--                 --然后交给下一层级执行
--                 return tryReplace(path,index+ 1, _table[cur_handle_name],v)
--             else
--                 if type(_table[cur_handle_name]) ~= "table" then
--                     --新的table，这里有东西，但不是table，认定为不覆盖这段代码
--                     return _table
--                 else
--                     --这是个tabel，处理下一层级
--                     return tryReplace(path,index+ 1, _table[cur_handle_name],v)
                    
--                 end

--             end
--         end
--         return _table
--     end

--     for i , v in pairs(old_code_info) do
--         tryReplace(i,1,new_code, v)
--         -- dump(new_code)
--     end

--     -- dump(new_code,"数据处理完")
    
--     print("热重载完成："  .. origin_code_path_name .. "|" .. full_path )
-- end