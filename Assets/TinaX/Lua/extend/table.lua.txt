---可数据绑定的table（实验性）



---生成一个可数据绑定的table
function table.Create(data)
    local re_table = {}
    local mt;
    mt = {
        t_data____ = {},
        t_bind____ = {}, --监听所有事件
        t_bind_by_key____ = {}, --监听指定的key的事件
        t_bindable_tag____ = 1,

        __index = function(t_data____,key)
            return mt.t_data____[key]
        end,
        __newindex = function(t_data____,key,value)
            local value_origin = mt.t_data____[key]
            if value_origin == value then return end
            mt.t_data____[key] = value
            if mt.t_bind____ ~= nil then
                for i , v in pairs(mt.t_bind____) do
                    v(key,value)
                end
            end
            if mt.t_bind_by_key____[key] ~= nil then
                for i , v in pairs(mt.t_bind_by_key____[key]) do
                    v(value)
                end
            end
        end
    }
    setmetatable(re_table,mt)
    if data ~= nil then
        for k , v in pairs(data) do
            re_table[k] = v
        end
    end
    return re_table
end

---对table创建一个监听,回调参数为key,value.
--@tparam bindable_table _table 可被数据绑定的table
--@tparam function func 回调方法
function table.Listen(_table,func) 
    --检查是不是"可绑定监听"的table
    local mt = getmetatable(_table)
    if mt == nil then 
        printE("不可为该table创建监听")
        return
    end
    if mt.t_bindable_tag____ ~= 1 then
        printE("不可为该table创建监听")
        return
    end
    mt.t_bind____[tostring(func)] = func
    
end

---移除监听
--@tparam bindable_table _table 可被数据绑定的table
--@tparam function func 回调方法
function table.RemoveListen(_table,func)
    local mt = getmetatable(_table)
    if mt == nil then 
        printE("不可为该table创建监听")
        return
    end
    if mt.t_bindable_tag____ ~= 1 then
        printE("不可为该table创建监听")
        return
    end
    mt.t_bind____[tostring(func)] = nil
end

---对table中某个指定的key创建一个监听,回调参数为value
--@tparam bindable_table _table 可被数据绑定的table
--@tparam bindable_key key 绑定的key
--@tparam function func 回调方法
--@bool invoke_now 注册后立即调用一次，默认为false
function table.ListenKey(_table,key,func,invoke_now)
    --检查是不是"可绑定监听"的table
    local mt = getmetatable(_table)
    if mt == nil then 
        printE("不可为该table创建监听")
        return
    end
    if mt.t_bindable_tag____ ~= 1 then
        printE("不可为该table创建监听")
        return
    end
    if mt.t_bind_by_key____[key] == nil then mt.t_bind_by_key____[key] = {} end
    mt.t_bind_by_key____[key][tostring(func)] = func
    if invoke_now == true then
        func(_table[key])
    end
end

---移除监听（key）
--@tparam bindable_table _table 可被数据绑定的table
--@tparam bindable_key key 绑定的key
--@tparam function func 回调方法
function table.RemoveListenKey(_table,key,func)
    --检查是不是"可绑定监听"的table
    local mt = getmetatable(_table)
    if mt == nil then 
        printE("不可为该table创建监听")
        return
    end
    if mt.t_bindable_tag____ ~= 1 then
        printE("不可为该table创建监听")
        return
    end
    if mt.t_bind_by_key____[key] == nil then return end
    mt.t_bind_by_key____[key][tostring(func)] = nil
end

---复制table
function table.clone(object)
    local lookup_table = {}
    local function _copy(object)
        if type(object) ~= "table" then
            return object
        elseif lookup_table[object] then
            return lookup_table[object]
        end
        local newObject = {}
        lookup_table[object] = newObject
        for key, value in pairs(object) do
            newObject[_copy(key)] = _copy(value)
        end
        return setmetatable(newObject, getmetatable(object))
    end
    return _copy(object)
end

---CSharp数组转table
function table.cs_array_to_table(arr)
    local t = {};
    for i = 0, arr.Length - 1 do
        arr.insert(t, arr[i]);
    end
    return t;
end